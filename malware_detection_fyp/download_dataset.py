"""
Automatic Dataset Download Script
Downloads the Malimg dataset from Kaggle using multiple methods
"""

import os
import shutil
import zipfile
from pathlib import Path
import subprocess
import sys

def setup_kaggle_api():
    """Check and setup Kaggle API credentials"""
    
    print("🔑 Setting up Kaggle API...")
    
    # Check if kaggle.json exists
    kaggle_dir = Path.home() / '.kaggle'
    kaggle_json = kaggle_dir / 'kaggle.json'
    
    if not kaggle_json.exists():
        print("❌ Kaggle API credentials not found!")
        print("\n📋 To set up Kaggle API:")
        print("1. Go to https://www.kaggle.com/account")
        print("2. Click 'Create New API Token'")
        print("3. Download kaggle.json")
        print("4. Place it in:", kaggle_dir)
        print("5. Run this script again")
        
        # Create the directory
        kaggle_dir.mkdir(exist_ok=True)
        return False
    
    # Set permissions (important for security)
    if os.name != 'nt':  # Not Windows
        os.chmod(kaggle_json, 0o600)
    
    print("✅ Kaggle API credentials found!")
    return True

def download_with_kaggle_api():
    """Download using direct kaggle API"""
    
    try:
        print("📥 Downloading with Kaggle API...")
        
        # Create temp download directory
        temp_dir = Path("temp_download")
        temp_dir.mkdir(exist_ok=True)
        
        # Download using subprocess
        cmd = [
            sys.executable, "-c",
            "from kaggle.api.kaggle_api_extended import KaggleApi; "
            "api = KaggleApi(); api.authenticate(); "
            "api.dataset_download_files('nenniramziwassim/malimg-dataset', path='temp_download', unzip=True)"
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("✅ Download successful!")
            return temp_dir
        else:
            print(f"❌ Download failed: {result.stderr}")
            return None
            
    except Exception as e:
        print(f"❌ Error with Kaggle API: {e}")
        return None

def download_with_kagglehub():
    """Download using kagglehub (backup method)"""
    
    try:
        import kagglehub
        print("📥 Downloading with KaggleHub...")
        
        downloaded_path = kagglehub.dataset_download("nenniramziwassim/malimg-dataset")
        print(f"✅ Downloaded to: {downloaded_path}")
        return Path(downloaded_path)
        
    except Exception as e:
        print(f"❌ KaggleHub failed: {e}")
        return None

def organize_dataset(source_dir):
    """Organize downloaded dataset into proper structure"""
    
    print("📁 Organizing dataset...")
    
    # Setup target directory
    target_dir = Path("data/raw/malimg_dataset")
    target_dir.mkdir(parents=True, exist_ok=True)
    
    # Find all files in source directory
    source_path = Path(source_dir)
    
    # Look for malware family folders
    family_dirs = []
    
    # Check if files are directly in source_dir
    for item in source_path.rglob("*"):
        if item.is_dir() and any(f.suffix.lower() in ['.png', '.jpg', '.jpeg'] for f in item.iterdir() if f.is_file()):
            family_dirs.append(item)
    
    # If no family dirs found, look for zip files
    if not family_dirs:
        for zip_file in source_path.glob("*.zip"):
            print(f"📦 Extracting: {zip_file.name}")
            with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                zip_ref.extractall(source_path)
        
        # Look again for family dirs after extraction
        for item in source_path.rglob("*"):
            if item.is_dir() and any(f.suffix.lower() in ['.png', '.jpg', '.jpeg'] for f in item.iterdir() if f.is_file()):
                family_dirs.append(item)
    
    # Copy family directories to target
    copied_families = 0
    total_images = 0
    
    for family_dir in family_dirs:
        dest = target_dir / family_dir.name
        
        # Remove existing directory
        if dest.exists():
            shutil.rmtree(dest)
        
        # Copy directory
        shutil.copytree(family_dir, dest)
        
        # Count images
        images = list(dest.glob("*.png")) + list(dest.glob("*.jpg")) + list(dest.glob("*.jpeg"))
        image_count = len(images)
        total_images += image_count
        
        print(f"   📂 {family_dir.name}: {image_count} images")
        copied_families += 1
    
    # Clean up temp directory
    if source_path.name == "temp_download":
        shutil.rmtree(source_path)
    
    print(f"\n📊 Dataset Organization Complete!")
    print(f"📁 Location: {target_dir.absolute()}")
    print(f"🏷️  Malware families: {copied_families}")
    print(f"🎯 Total images: {total_images}")
    
    if total_images > 5000:
        print("\n✅ Dataset looks good! Ready for preprocessing.")
        print("   Next step: python scripts/run_preprocessing.py")
        return True
    else:
        print("\n⚠️  Dataset seems incomplete. Expected ~9,339 images.")
        return False

def download_malimg_dataset():
    """Main download function with multiple fallback methods"""
    
    print("🚀 MALWARE DATASET DOWNLOAD")
    print("=" * 60)
    
    # Check if dataset already exists
    target_dir = Path("data/raw/malimg_dataset")
    if target_dir.exists():
        families = [d for d in target_dir.iterdir() if d.is_dir()]
        if len(families) > 20:
            total_images = sum(len(list(f.glob("*.png")) + list(f.glob("*.jpg"))) for f in families)
            if total_images > 5000:
                print("✅ Dataset already exists and looks complete!")
                print(f"📁 Found {len(families)} families with {total_images} images")
                return True
    
    # Method 1: Try Kaggle API
    if setup_kaggle_api():
        source_dir = download_with_kaggle_api()
        if source_dir and organize_dataset(source_dir):
            return True
    
    # Method 2: Try KaggleHub
    print("\n🔄 Trying alternative download method...")
    source_dir = download_with_kagglehub()
    if source_dir and organize_dataset(source_dir):
        return True
    
    # Method 3: Manual instructions
    print("\n❌ Automatic download failed.")
    print("\n📋 MANUAL DOWNLOAD REQUIRED:")
    print("1. Go to: https://www.kaggle.com/datasets/nenniramziwassim/malimg-dataset")
    print("2. Download the dataset")
    print("3. Extract to: data/raw/malimg_dataset/")
    print("4. Run this script again to verify")
    
    return False

if __name__ == "__main__":
    success = download_malimg_dataset()
    if success:
        print("\n🎉 Ready to start training!")
    else:
        print("\n⚠️  Please complete manual download and try again.")